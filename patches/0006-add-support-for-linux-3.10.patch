--- a/src/wl/sys/wl_linux.c	2013-05-09 13:36:08.000000000 +0200
+++ b/src/wl/sys/wl_linux.c	2013-05-09 14:07:26.785022917 +0200
@@ -191,7 +191,7 @@
 static void wl_report_radio_state(wl_info_t *wl);
 #endif
 
-MODULE_LICENSE("MIXED/Proprietary");
+MODULE_LICENSE("GPL");
 
 static struct pci_device_id wl_id_table[] = {
 	{ PCI_VENDOR_ID_BROADCOM, 0x4311, PCI_ANY_ID, PCI_ANY_ID, 0, 0, 0 }, 
@@ -3132,48 +3132,26 @@
 }
 
 static int
-wl_proc_read(char *buffer, char **start, off_t offset, int length, int *eof, void *data)
+wl_proc_read(struct seq_file *m, void *data)
 {
 	wl_info_t * wl = (wl_info_t *)data;
 	int bcmerror, to_user;
 	int len;
 
-	if (offset > 0) {
-		*eof = 1;
-		return 0;
-	}
-
-	if (!length) {
-		WL_ERROR(("%s: Not enough return buf space\n", __FUNCTION__));
-		return 0;
-	}
 	WL_LOCK(wl);
 	bcmerror = wlc_ioctl(wl->wlc, WLC_GET_MONITOR, &to_user, sizeof(int), NULL);
-	len = sprintf(buffer, "%d\n", to_user);
+	len = seq_printf(m, "%d\n", to_user);
 	WL_UNLOCK(wl);
 	return len;
 }
 
-static int
-wl_proc_write(struct file *filp, const char __user *buff, unsigned long length, void *data)
+static ssize_t
+wl_proc_write(struct file *filp, const char __user *buff, size_t length, loff_t *data)
 {
 	wl_info_t * wl = (wl_info_t *)data;
 	int from_user = 0;
 	int bcmerror;
 
-	if (length == 0 || length > 2) {
-
-		WL_ERROR(("%s: Invalid data length\n", __FUNCTION__));
-		return -EIO;
-	}
-	if (copy_from_user(&from_user, buff, 1)) {
-		WL_ERROR(("%s: copy from user failed\n", __FUNCTION__));
-		return -EIO;
-	}
-
-	if (from_user >= 0x30)
-		from_user -= 0x30;
-
 	WL_LOCK(wl);
 	bcmerror = wlc_ioctl(wl->wlc, WLC_SET_MONITOR, &from_user, sizeof(int), NULL);
 	WL_UNLOCK(wl);
@@ -3185,18 +3163,25 @@
 	return length;
 }
 
+static int wl_proc_open(struct inode *inode, struct file *file){
+    return single_open(file, wl_proc_read, NULL);
+}
+
+static const struct file_operations fops = {
+		.read = wl_proc_open,
+		.llseek = seq_lseek,
+		.write = wl_proc_write,
+};
+
 static int
 wl_reg_proc_entry(wl_info_t *wl)
 {
 	char tmp[32];
 	sprintf(tmp, "%s%d", HYBRID_PROC, wl->pub->unit);
-	if ((wl->proc_entry = create_proc_entry(tmp, 0644, NULL)) == NULL) {
+	if ((wl->proc_entry = proc_create_data(tmp, 0644, NULL, &fops, wl)) == NULL) {
 		WL_ERROR(("%s: create_proc_entry %s failed\n", __FUNCTION__, tmp));
 		ASSERT(0);
 		return -1;
 	}
-	wl->proc_entry->read_proc = wl_proc_read;
-	wl->proc_entry->write_proc = wl_proc_write;
-	wl->proc_entry->data = wl;
 	return 0;
 }
